plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

configurations {
    javafx {
        description = 'Java FX libraries'
    }
    implementation {
        extendsFrom configurations.javafx
    }
    runtime {
        extendsFrom configurations.javafx
    }
}

dependencies {
    javafx group: 'org.openjfx', name: 'javafx-base', version: versionJavafx, classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-graphics', version: versionJavafx, classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-fxml', version: versionJavafx, classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-controls', version: versionJavafx, classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-media', version: versionJavafx, classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-web', version: versionJavafx, classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-swing', version: versionJavafx, classifier: javaFxPlatform

    implementation group: 'kr.motd.maven', name:'os-maven-plugin', version: versionOsMavenPlugin

    implementation group: 'jakarta.json', name:'jakarta.json-api', version: versionJakartaJsonApi
    implementation group: 'jakarta.json.bind', name:'jakarta.json.bind-api', version: versionJakartaJsonBindApi

    implementation project(':shell')
    implementation project(':ui')
}

ext {
    getJvmModulePath = { -> (configurations.javafx).asPath}
    getJvmAdditionalModules = { ->
        [
            'javafx.base',
            'javafx.controls',
            'javafx.fxml',
            'javafx.graphics',
            'javafx.media',
            'javafx.swing'
        ].toUnique().toSorted().join(',')
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.jtaccuino.app.Studio'
}

compileJava {
    options.compilerArgs.addAll([
            '--module-path',
            getJvmModulePath(),
            '--add-modules',
            getJvmAdditionalModules(),
    ])
}

run {
    jvmArgs '--enable-preview'
    jvmArgs '--module-path'
    jvmArgs getJvmModulePath()
    jvmArgs '--add-modules'
    jvmArgs getJvmAdditionalModules()
    jvmArgs '--add-opens'
    jvmArgs 'java.base/jdk.internal.misc=ALL-UNNAMED'
}
