plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

configurations {
    javafx {
        description = 'Java FX libraries'
    }
    implementation {
        extendsFrom configurations.javafx
    }
    runtime {
        extendsFrom configurations.javafx
    }
}

dependencies {
    javafx 'org.openjfx:javafx-base:' + versionJavafx + ':' + javaFxPlatform
    javafx 'org.openjfx:javafx-graphics:' + versionJavafx + ':' + javaFxPlatform
    javafx 'org.openjfx:javafx-fxml:' + versionJavafx + ':' + javaFxPlatform
    javafx 'org.openjfx:javafx-controls:' + versionJavafx+':' + javaFxPlatform
    javafx 'org.openjfx:javafx-media:' + versionJavafx+':' + javaFxPlatform
    javafx 'org.openjfx:javafx-web:' + versionJavafx + ':' + javaFxPlatform
    javafx 'org.openjfx:javafx-swing:' + versionJavafx + ':' + javaFxPlatform

    implementation 'kr.motd.maven:os-maven-plugin:' + versionOsMavenPlugin

    implementation 'jakarta.json:jakarta.json-api:' + versionJakartaJsonApi
    implementation 'jakarta.json.bind:jakarta.json.bind-api:' + versionJakartaJsonBindApi

    implementation project(':shell')
    implementation project(':ui')
}

ext {
    getJvmModulePath = { -> (configurations.javafx).asPath}
    getJvmAdditionalModules = { ->
        [
            'javafx.base',
            'javafx.controls',
            'javafx.fxml',
            'javafx.graphics',
            'javafx.media',
            'javafx.swing'
        ].toUnique().toSorted().join(',')
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.jtaccuino.app.Studio'
}

compileJava {
    options.compilerArgs.addAll([
            '--module-path',
            getJvmModulePath(),
            '--add-modules',
            getJvmAdditionalModules(),
    ])
}

run {
    jvmArgs '--enable-preview'
    jvmArgs '--module-path'
    jvmArgs getJvmModulePath()
    jvmArgs '--add-modules'
    jvmArgs getJvmAdditionalModules()
    jvmArgs '--add-opens'
    jvmArgs 'java.base/jdk.internal.misc=ALL-UNNAMED'
}
