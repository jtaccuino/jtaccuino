plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'com.google.osdetector' version '1.7.3'
}

ext {
    javaFxPlatform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
    javaFxPlatform = osdetector.arch == 'aarch_64' ? javaFxPlatform + '-aarch64' : javaFxPlatform
}

configurations {
    javafx {
        description = 'Java FX libraries'
    }
    implementation {
        extendsFrom configurations.javafx
    }
    runtime {
        extendsFrom configurations.javafx
    }
}

dependencies {
    javafx group: 'org.openjfx', name: 'javafx-base', version: versionJavafx, classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-graphics', version: versionJavafx, classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-fxml', version: versionJavafx, classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-controls', version: versionJavafx, classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-media', version: versionJavafx, classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-web', version: versionJavafx, classifier: javaFxPlatform
    javafx group: 'org.openjfx', name: 'javafx-swing', version: versionJavafx, classifier: javaFxPlatform

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'

    testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher', version: versionJunitPlatformLauncher

    implementation group: 'kr.motd.maven', name:'os-maven-plugin', version: versionOsMavenPlugin

    implementation group: 'jakarta.json', name:'jakarta.json-api', version: versionJakartaJsonApi
    implementation group: 'jakarta.json.bind', name:'jakarta.json.bind-api', version: versionJakartaJsonBindApi

    implementation project(":ui")
    implementation project(":shell")
}

ext {
    getJvmModulePath = { -> (configurations.javafx).asPath}
    getJvmAdditionalModules = { ->
        [
            'javafx.base',
            'javafx.controls',
            'javafx.fxml',
            'javafx.graphics',
            'javafx.media',
            'javafx.swing'
        ].toUnique().toSorted().join(',')
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(versionJavaLanguage)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.jtaccuino.app.Studio'
}

compileJava {
    options.compilerArgs.addAll([
            // lint everithing except preview (as using preview features would generate a warnig and thus break the build)
            '-Xlint:all,-preview',
            '-Werror',
            '-proc:none',
            '--module-path',
            getJvmModulePath(),
            '--add-modules',
            getJvmAdditionalModules(),
    ])
}

run {
    jvmArgs '--enable-preview'
    jvmArgs '--module-path'
    jvmArgs getJvmModulePath()
    jvmArgs '--add-modules'
    jvmArgs getJvmAdditionalModules()
    jvmArgs '--add-opens'
    jvmArgs 'java.base/jdk.internal.misc=ALL-UNNAMED'
}

test {
    useJUnitPlatform()
}
