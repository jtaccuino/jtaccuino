name: Build

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

jobs:
  build:
    strategy:
      matrix:
        os: [ macos-13, macos-14, ubuntu-latest, windows-latest ]
        include:
          - os: macos-13
            ARCH: "-amd64"
            PLAT: "macos"
          - os: macos-14
            ARCH: "-aarch64"
            PLAT: "macos"
          - os: ubuntu-latest
            ARCH: ""
            PLAT: "linux"
          - os: windows-latest
            ARCH: ""
            PLAT: "win"
    runs-on: ${{ matrix.os }}
    steps:

      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install at-spi2-core build-essential libgtk-3-dev libxtst-dev libavcodec-dev libavformat-dev libasound2-dev libgl-dev
          
      - uses: actions/checkout@v4

      - name: Read properties from app gradle.properties
        id: app-gradle-props
        uses: kurt-code/gha-properties@v0.0.1
        with:
          operation: 'read'
          file-path: 'app/gradle.properties'
          keys: 'additional_jdk_modules, version, app_version'

      - name: Setup Java 24
        id: java24
        uses: actions/setup-java@v5
        with:
          distribution: 'zulu'
          java-version: 24

      - name: Setup JPackage Home
        id: jpackage
        run: |
          echo JPACKAGE_HOME=$JAVA_HOME >> $GITHUB_OUTPUT

      - name: Setup Java 25
        id: java25
        uses: actions/setup-java@v5
        with:
          distribution: 'zulu'
          java-version: 25

      - uses: Apple-Actions/import-codesign-certs@v3
        if: github.event_name != 'pull_request' && (matrix.os == 'macos-13' || matrix.os == 'macos-14')
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.CERTIFICATES_PASSWORD }}

      - name: Build project
        run: ./gradlew -i build -x test
        
      - name: Run Tests (Linux)
        if: runner.os == 'Linux'
        run: |
          export DISPLAY=:90
          Xvfb -ac :90 -screen 0 1280x1024x24 > /dev/null 2>&1 &
          ./gradlew -i test
          
      - name: Run Tests (MacOS)
        if: runner.os == 'macOS'
        run: |
          ./gradlew -i test
          
      - name: Run Tests (Windows)
        if: runner.os == 'Windows'
        run: |
          ./gradlew -i test

      - name: Create Bundle using jpackage for macos
        if: matrix.os == 'macos-13' || matrix.os == 'macos-14'
        id: outputfile_mac
        run: |
          if [[ ${{ github.event_name }} != 'pull_request' ]]; then
          .github/scripts/build_app_mac.sh \
            --mac-package-signing-prefix "${{ env.MACSIGN_PREFIX }}" \
            --mac-signing-key-user-name "${{ env.MACSIGN_USER }}" \
            --mac-sign
          else
            .github/scripts/build_app_mac.sh
          fi
          ls target/installer
          mv target/installer/JTaccuinoStudio-${{ steps.app-gradle-props.outputs.app_version }}.pkg target/installer/JTaccuinoStudio-${{ steps.app-gradle-props.outputs.app_version }}${{ matrix.ARCH }}.pkg
          echo path=target/installer/JTaccuinoStudio-${{ steps.app-gradle-props.outputs.app_version }}${{ matrix.ARCH }}.pkg >> $GITHUB_OUTPUT
        env:
          MACSIGN_PREFIX: ${{ secrets.GLUON_MACSIGN_PREFIX }}
          MACSIGN_USER: ${{ secrets.GLUON_MACSIGN_USER }}
          JPACKAGE_HOME: ${{ steps.jpackage.outputs.JPACKAGE_HOME }}
          VERSION: ${{ steps.app-gradle-props.outputs.version }}
          APP_VERSION: ${{ steps.app-gradle-props.outputs.app_version }}
          ADDITIONAL_JDK_MODULES: ${{ steps.app-gradle-props.outputs.additional_jdk_modules }}          

      - name: Create Bundle using jpackage for linux
        if: matrix.os == 'ubuntu-latest'
        id: outputfile_linux
        run: |
          .github/scripts/build_app_linux.sh \
            --type deb
          echo path_deb=target/installer/jtaccuinostudio_${{ steps.app-gradle-props.outputs.app_version }}_amd64.deb >> $GITHUB_OUTPUT
          .github/scripts/build_app_linux.sh \
            --type rpm
          echo path_rpm=target/installer/jtaccuinostudio-${{ steps.app-gradle-props.outputs.app_version }}-1.x86_64.rpm >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ steps.app-gradle-props.outputs.version }}
          APP_VERSION: ${{ steps.app-gradle-props.outputs.app_version }}
          ADDITIONAL_JDK_MODULES: ${{ steps.app-gradle-props.outputs.additional_jdk_modules }}          

      - name: Create Bundle using jpackage for windows
        if: matrix.os == 'windows-latest'
        id: outputfile_win
        shell: cmd
        run: |
          call .github\scripts\build_app_windows.bat
          echo path=target\installer\JTaccuinoStudio-${{ steps.app-gradle-props.outputs.app_version }}.msi >> %GITHUB_OUTPUT%
        env:
          VERSION: ${{ steps.app-gradle-props.outputs.version }}
          APP_VERSION: ${{ steps.app-gradle-props.outputs.app_version }}
          ADDITIONAL_JDK_MODULES: ${{ steps.app-gradle-props.outputs.additional_jdk_modules }}                    

      - name: Notarize Release Build
        if: github.event_name != 'pull_request' && (matrix.os == 'macos-13' || matrix.os == 'macos-14')
        uses: erwin1/xcode-notarizer@v1
        with:
          product-path: ${{ steps.outputfile_mac.outputs.path }}
          apple-id: ${{ secrets.NOTARIZATION_USERNAME }}
          app-password: ${{ secrets.NOTARIZATION_PASSWORD }}
          team-id: ${{ secrets.GLUON_MACSIGN_PREFIX }}

      - name: Archive jpackage for macos
        if: matrix.os == 'macos-13' || matrix.os == 'macos-14'
        uses: actions/upload-artifact@v4
        with:
          name: JTaccuinoStudio-${{ matrix.PLAT }}${{ matrix.ARCH }}
          path: ${{ steps.outputfile_mac.outputs.path }}

      - name: Archive jpackage for linux deb
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: JTaccuinoStudio-${{ matrix.PLAT }}${{ matrix.ARCH }}-deb
          path: ${{ steps.outputfile_linux.outputs.path_deb }}

      - name: Archive jpackage for linux rpm
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: JTaccuinoStudio-${{ matrix.PLAT }}${{ matrix.ARCH }}-rpm
          path: ${{ steps.outputfile_linux.outputs.path_rpm }}

      - name: Archive jpackage for windows
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: JTaccuinoStudio-${{ matrix.PLAT }}${{ matrix.ARCH }}
          path: ${{ steps.outputfile_win.outputs.path }}
